# Stubs for pendulum.duration (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .constants import SECONDS_PER_DAY, SECONDS_PER_HOUR, SECONDS_PER_MINUTE, US_PER_SECOND
from datetime import timedelta
from typing import Any, Optional

class Duration(timedelta):
    def __new__(cls, days: int = ..., seconds: int = ..., microseconds: int = ..., milliseconds: int = ..., minutes: int = ..., hours: int = ..., weeks: int = ..., years: int = ..., months: int = ...): ...
    def total_minutes(self): ...
    def total_hours(self): ...
    def total_days(self): ...
    def total_weeks(self): ...
    def total_seconds(self): ...
    @property
    def years(self): ...
    @property
    def months(self): ...
    @property
    def weeks(self): ...
    @property
    def days(self): ...
    @property
    def remaining_days(self): ...
    @property
    def hours(self): ...
    @property
    def minutes(self): ...
    @property
    def seconds(self): ...
    @property
    def remaining_seconds(self): ...
    @property
    def microseconds(self): ...
    @property
    def invert(self): ...
    def in_weeks(self): ...
    def in_days(self): ...
    def in_hours(self): ...
    def in_minutes(self): ...
    def in_seconds(self): ...
    def in_words(self, locale: Optional[Any] = ..., separator: str = ...): ...
    def as_timedelta(self): ...
    def __add__(self, other: Any): ...
    __radd__: Any = ...
    def __sub__(self, other: Any): ...
    def __neg__(self): ...
    def __mul__(self, other: Any): ...
    __rmul__: Any = ...
    def __floordiv__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    __div__: Any = ...
    def __mod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...

class AbsoluteDuration(Duration):
    def __new__(cls, days: int = ..., seconds: int = ..., microseconds: int = ..., milliseconds: int = ..., minutes: int = ..., hours: int = ..., weeks: int = ..., years: int = ..., months: int = ...): ...
    def total_seconds(self): ...
    @property
    def invert(self): ...
