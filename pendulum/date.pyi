# Stubs for pendulum.date (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .constants import DAYS_PER_WEEK, FRIDAY, MONDAY, MONTHS_PER_YEAR, SATURDAY, SUNDAY, THURSDAY, TUESDAY, WEDNESDAY, YEARS_PER_CENTURY, YEARS_PER_DECADE
from .exceptions import PendulumException
from .helpers import add_duration
from .mixins.default import FormattableMixing
from .period import Period
from datetime import date
from typing import Any, Optional

class Date(FormattableMixing, date):
    def set(self, year: Optional[Any] = ..., month: Optional[Any] = ..., day: Optional[Any] = ...): ...
    @property
    def day_of_week(self): ...
    @property
    def day_of_year(self): ...
    @property
    def week_of_year(self): ...
    @property
    def days_in_month(self): ...
    @property
    def week_of_month(self): ...
    @property
    def age(self): ...
    @property
    def quarter(self): ...
    def to_date_string(self): ...
    def to_formatted_date_string(self): ...
    def closest(self, dt1: Any, dt2: Any): ...
    def farthest(self, dt1: Any, dt2: Any): ...
    def is_future(self): ...
    def is_past(self): ...
    def is_leap_year(self): ...
    def is_long_year(self): ...
    def is_same_day(self, dt: Any): ...
    def is_birthday(self, dt: Optional[Any] = ...): ...
    def add(self, years: int = ..., months: int = ..., weeks: int = ..., days: int = ...): ...
    def subtract(self, years: int = ..., months: int = ..., weeks: int = ..., days: int = ...): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def diff(self, dt: Optional[Any] = ..., abs: bool = ...): ...
    def diff_for_humans(self, other: Optional[Any] = ..., absolute: bool = ..., locale: Optional[Any] = ...): ...
    def start_of(self, unit: Any): ...
    def end_of(self, unit: Any): ...
    def next(self, day_of_week: Optional[Any] = ...): ...
    def previous(self, day_of_week: Optional[Any] = ...): ...
    def first_of(self, unit: Any, day_of_week: Optional[Any] = ...): ...
    def last_of(self, unit: Any, day_of_week: Optional[Any] = ...): ...
    def nth_of(self, unit: Any, nth: Any, day_of_week: Any): ...
    def average(self, dt: Optional[Any] = ...): ...
    @classmethod
    def today(cls): ...
    @classmethod
    def fromtimestamp(cls, t: Any): ...
    @classmethod
    def fromordinal(cls, n: Any): ...
    def replace(self, year: Optional[Any] = ..., month: Optional[Any] = ..., day: Optional[Any] = ...): ...
